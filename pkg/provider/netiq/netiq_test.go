package netiq

import (
	"bytes"
	"github.com/PuerkitoBio/goquery"
	"github.com/stretchr/testify/require"
	"github.com/versent/saml2aws/pkg/page"
	"io/ioutil"
	"net/url"
	"testing"
)

func TestIsSAMLResponsePositive(t *testing.T) {
	//given
	samlResponseData, err := ioutil.ReadFile("responses/samlRespose.html")
	require.Nil(t, err)

	//when
	samlRespDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(samlResponseData))
	require.Nil(t, err)

	//then
	require.True(t, isSAMLResponse(samlRespDoc))
}

func TestIsSAMLResponseNegative(t *testing.T) {
	//given
	getToContentData, err := ioutil.ReadFile("responses/getToContent.html")
	require.Nil(t, err)

	//when
	getToContentDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(getToContentData))
	require.Nil(t, err)

	//then
	require.False(t, isSAMLResponse(getToContentDoc))
}

func TestExtractSAMLAssertion(t *testing.T) {
	//given
	samlResponseData, err := ioutil.ReadFile("responses/samlRespose.html")
	require.Nil(t, err)
	expectedResult := ""

	//when
	samlResponseDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(samlResponseData))
	require.Nil(t, err)
	actualResult, err := extractSAMLAssertion(samlResponseDoc)
	require.Nil(t, err)

	//then
	require.Equal(t, expectedResult, actualResult)
}

func TestExtractGetToContentUrlPositive(t *testing.T) {
	//given
	getToContentData, err := ioutil.ReadFile("responses/getToContent.html")
	require.Nil(t, err)
	expectedResourceUrl := "/nidp/jsp/content.jsp?sid=0&option=credential&id=AWS"

	//when
	getToContentDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(getToContentData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractGetToContentUrl(getToContentDoc)

	//then
	require.True(t, ok)
	require.Equal(t, expectedResourceUrl, actualResourceUrl)
}

func TestExtractGetToContentUrlNegative(t *testing.T) {
	//given
	samlResposeData, err := ioutil.ReadFile("responses/samlRespose.html")
	require.Nil(t, err)

	//when
	samlResposeDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(samlResposeData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractGetToContentUrl(samlResposeDoc)

	//then
	require.False(t, ok)
	require.Equal(t, "", actualResourceUrl)
}

func TestExtractGetToContentUrlDiv(t *testing.T) {
	//given
	getToContentData, err := ioutil.ReadFile("responses/getToContentDiv.html")
	require.Nil(t, err)
	expectedResourceUrl := "/nidp/app/login?id=contract_kerb&sid=0&option=credential&sid=0"

	//when
	getToContentDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(getToContentData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractGetToContentUrl(getToContentDoc)

	//then
	require.True(t, ok)
	require.Equal(t, expectedResourceUrl, actualResourceUrl)
}

func TestExtractWinLocHrefUrlPositive(t *testing.T) {
	//given
	winLocHrefData, err := ioutil.ReadFile("responses/winLocHref.html")
	require.Nil(t, err)
	expectedResourceUrl := "https://login.authbridge.somegroup.com/nidp/saml2/idpsend?PID=STSPv8a5kc"

	//when
	winLocHrefDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(winLocHrefData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractWinLocHrefURL(winLocHrefDoc)

	//then
	require.True(t, ok)
	require.Equal(t, expectedResourceUrl, actualResourceUrl)
}

func TestExtractWinLocHrefUrlNegative(t *testing.T) {
	//given
	samlResposeData, err := ioutil.ReadFile("responses/samlRespose.html")
	require.Nil(t, err)

	//when
	samlResposeDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(samlResposeData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractWinLocHrefURL(samlResposeDoc)

	//then
	require.False(t, ok)
	require.Equal(t, "", actualResourceUrl)
}

func TestExtractIDPLoginPassPositive(t *testing.T) {
	//given
	idpLoginPassData, err := ioutil.ReadFile("responses/idpLoginPass.html")
	require.Nil(t, err)
	expectedForm := &page.Form{
		URL:    "https://login.authbridge.somegroup.com/nidp/app/login?sid=0&sid=0",
		Method: "POST",
		Values: &url.Values{},
	}

	//when
	idpLoginPassDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(idpLoginPassData))
	require.Nil(t, err)
	actualForm, ok := extractIDPLoginPass(idpLoginPassDoc)

	//then
	require.True(t, ok)
	require.Equal(t, expectedForm, actualForm)
}

func TestExtractIDPLoginPassNegative(t *testing.T) {
	//given
	idpLoginRsaData, err := ioutil.ReadFile("responses/idpLoginRsa.html")
	require.Nil(t, err)

	//when
	idpLoginRsaDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(idpLoginRsaData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractIDPLoginPass(idpLoginRsaDoc)

	//then
	require.False(t, ok)
	require.Nil(t, actualResourceUrl)
}

func TestExtractIDPLoginRsaPositive(t *testing.T) {
	//given
	idpLoginRsaData, err := ioutil.ReadFile("responses/idpLoginRsa.html")
	require.Nil(t, err)
	expectedForm := &page.Form{
		URL:    "https://login.authbridge.somegroup.com/nidp/app/login?sid=11&sid=11",
		Method: "POST",
		Values: &url.Values{},
	}

	//when
	idpLoginRsaDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(idpLoginRsaData))
	require.Nil(t, err)
	actualForm, ok := extractIDPLoginRsa(idpLoginRsaDoc)

	//then
	require.True(t, ok)
	require.Equal(t, expectedForm, actualForm)
}

func TestExtractIDPLoginRsaNegative(t *testing.T) {
	//given
	idpLoginPassData, err := ioutil.ReadFile("responses/idpLoginPass.html")
	require.Nil(t, err)

	//when
	idpLoginPassDoc, err := goquery.NewDocumentFromReader(bytes.NewReader(idpLoginPassData))
	require.Nil(t, err)
	actualResourceUrl, ok := extractIDPLoginRsa(idpLoginPassDoc)

	//then
	require.False(t, ok)
	require.Nil(t, actualResourceUrl)
}
